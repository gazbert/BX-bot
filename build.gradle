buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
    }
}

plugins {
    id "org.sonarqube" version "2.7.1"
    id 'jacoco'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    // publishAlways()
}

ext.versions = [
        springBootVersion        : '2.1.4.RELEASE',
        springCloudVersion       : '2.1.1.RELEASE',
        springTxVersion          : '5.1.6.RELEASE',
        springFoxVersion         : '2.9.2',
        hibernateVaildatorVersion: '6.0.2.Final'
]

ext.libraries = [
        spring_boot_starter                     : dependencies.create("org.springframework.boot:spring-boot-starter:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_boot_starter_log4j2              : dependencies.create("org.springframework.boot:spring-boot-starter-log4j2:" + ext.versions.springBootVersion),
        spring_boot_starter_web                 : dependencies.create("org.springframework.boot:spring-boot-starter-web:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_boot_starter_data_jpa            : dependencies.create("org.springframework.boot:spring-boot-starter-data-jpa:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_boot_starter_data_rest           : dependencies.create("org.springframework.boot:spring-boot-starter-data-rest:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_boot_starter_actuator            : dependencies.create("org.springframework.boot:spring-boot-starter-actuator:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_boot_starter_security            : dependencies.create("org.springframework.boot:spring-boot-starter-security:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_cloud_starter                    : dependencies.create("org.springframework.cloud:spring-cloud-starter:" + ext.versions.springCloudVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_tx                               : dependencies.create("org.springframework:spring-tx:" + ext.versions.springTxVersion),
        jjwt                                    : dependencies.create("io.jsonwebtoken:jjwt:0.9.1"),
        google_guava                            : dependencies.create("com.google.guava:guava:27.1-jre"),
        google_gson                             : dependencies.create("com.google.code.gson:gson:2.8.5"),
        h2                                      : dependencies.create("com.h2database:h2:1.4.199"),
        javax_mail_api                          : dependencies.create("javax.mail:javax.mail-api:1.6.2"),
        javax_mail_sun                          : dependencies.create("com.sun.mail:javax.mail:1.6.2"),
        javax_xml_api                           : dependencies.create("javax.xml.bind:jaxb-api:2.3.1"),
        javax_xml_impl                          : dependencies.create("com.sun.xml.bind:jaxb-impl:2.3.1"),
        snake_yaml                              : dependencies.create("org.yaml:snakeyaml:1.24"),

        springfox_swagger2                      : dependencies.create("io.springfox:springfox-swagger2:" + ext.versions.springFoxVersion),
        springfox_swagger_ui                    : dependencies.create("io.springfox:springfox-swagger-ui:" + ext.versions.springFoxVersion),
        springfox_bean_validators               : dependencies.create("io.springfox:springfox-bean-validators:" + ext.versions.springFoxVersion),
        swagger_annotations                     : dependencies.create("io.swagger:swagger-annotations:1.5.24"),

        validation_api                          : dependencies.create("javax.validation:validation-api:2.0.0.Final"),
        hibernate_validator                     : dependencies.create("org.hibernate.validator:hibernate-validator:" + ext.versions.hibernateVaildatorVersion),
        hibernate_validator_annotation_processor: dependencies.create("org.hibernate.validator:hibernate-validator-annotation-processor:" + ext.versions.hibernateVaildatorVersion),

        junit                                   : dependencies.create("junit:junit:4.12"),
        powermock_junit                         : dependencies.create("org.powermock:powermock-module-junit4:2.0.2"),
        powermock_api_easymock                  : dependencies.create("org.powermock:powermock-api-easymock:2.0.2"),
        easymock                                : dependencies.create("org.easymock:easymock:4.0.2"),

        spring_boot_starter_test                : dependencies.create("org.springframework.boot:spring-boot-starter-test:" + ext.versions.springBootVersion) {
            exclude module: "spring-boot-starter-logging"
            force = true
        },
        spring_security_test                    : dependencies.create("org.springframework.security:spring-security-test:5.2.1.RELEASE"),
        awaitility                              : dependencies.create("org.awaitility:awaitility:3.1.6"),

        jbehave_core                            : dependencies.create("org.jbehave:jbehave-core:4.6"),
        httpclient                              : dependencies.create("org.apache.httpcomponents:httpclient:4.5.11") {
            exclude module: "commons-logging"
            force = true
        },
        httpcore                                : dependencies.create("org.apache.httpcomponents:httpcore:4.4.13"),
]

allprojects {

    apply plugin: "io.spring.dependency-management"
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: "com.github.spotbugs"
    apply plugin: "jacoco"

    group = 'com.gazbert.bxbot'
    version = '0.12.2-SNAPSHOT'
}

subprojects {

    apply plugin: 'java'

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    repositories {
        mavenCentral()
    }

    test {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    javadoc {
        include "**/api/**"
    }

    checkstyle {
        toolVersion '8.21'
        configFile = file("${rootDir}/etc/google_checks.xml")
        ignoreFailures = false
        showViolations = true
        maxErrors = 0
        maxWarnings = 0
    }
    checkstyleMain {
        source = 'src/main/java'
    }
    checkstyleTest {
        source = 'src/test/java'
    }

    spotbugs {
        ignoreFailures = false
        sourceSets = [sourceSets.main]
        excludeFilter = file("${rootDir}/etc/spotbugs-exclude-filter.xml")
        reportsDir = file("$project.buildDir/reports/spotbugs")
        effort = "max"
    }
    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }

    jacoco {
        toolVersion = "0.8.3"
    }
    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.enabled true
        }
    }
    test.finalizedBy jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}

// TODO: Strip out common stuff into separate method?
task buildZipDist(type: Zip, dependsOn: build) {

    baseName = 'bxbot-app'

    into("$baseName-$version") {

        into('libs') {
            from 'bxbot-app/build/libs'
            include '*.jar' //copy the fat jar created by bootRepackage
        }

        into('') {
            from 'README.md'
        }

        into('') {
            from 'CONTRIBUTING.md'
        }

        into('') {
            from 'LICENSE'
        }

        into('') {
            from '3rd-party-licenses.md'
        }

        into('') {
            from 'bxbot.sh'
        }

        into('') {
            from 'bxbot.bat'
        }

        from('config/application.properties') {
            into 'config'
        }

        into('config') {
            from 'config'
            include('*.xml')
            include('*.yaml')
        }
    }
}

// TODO: Strip out common stuff into separate method?
task buildTarGzipDist(type: Tar, dependsOn: build) {

    baseName = 'bxbot-app'
    extension = 'tar.gz'
    compression = Compression.GZIP

    into("$baseName-$version") {

        into('libs') {
            from 'bxbot-app/build/libs'
            include '*.jar' //copy the fat jar created by bootRepackage
        }

        into('') {
            from 'README.md'
        }

        into('') {
            from 'CONTRIBUTING.md'
        }

        into('') {
            from 'LICENSE'
        }

        into('') {
            from '3rd-party-licenses.md'
        }

        into('') {
            from 'bxbot.sh'
        }

        into('') {
            from 'bxbot.bat'
        }

        from('config/application.properties') {
            into 'config'
        }

        into('config') {
            from 'config'
            include('*.xml')
            include('*.yaml')
        }
    }
}

