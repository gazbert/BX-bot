###############################################################################
#
# BX-bot's Spring Boot application config.
#
###############################################################################

# The port the Spring Boot container will listen on for incoming HTTP requests.
# Defaults to 8080 if not set. Setting it to -1 disables the port.
server.port=8080

# The Spring Boot management address.
# Locked down to prevent remote access; we only allow access from the local machine by design.
management.address=127.0.0.1

# Location of BX-bot log4j2 config file.
# Spring Boot seems to need this to initialise logging successfully.
logging.config=./config/log4j2.xml

# Used to access the bot's REST API.
# CHANGE THESE VALUES FOR YOUR BOT!
spring.security.user.name=bxbot-ui
spring.security.user.password=changeme

# Spring Actuator endpoints required by the bot.
management.endpoints.enabled-by-default=false
management.endpoint.restart.enabled=true
management.endpoint.health.enabled=true
management.endpoint.logfile.enabled=true

# Must be set for management.endpoint.logfile to work.
logging.file=./logs/bxbot.log

# Max number of lines from the logfile to be returned by the REST API /runtime/logfile endpoint.
# If the number of lines in the logfile exceeds this limit, the file content will truncated.
bxbot.restapi.maxLogfileLines=1000

# Max size (in bytes) of logfile to be downloaded from the REST API /runtime/logfile/download endpoint.
# If the size of the logfile exceeds this limit, the end of the file will be truncated before download.
bxbot.restapi.maxLogfileDownloadSize=1048576

# TODO: We don't expose actuator endpoints directly - they can only be called by the Bot's REST API.
management.endpoints.web.exposure.exclude=*
#management.endpoints.web.exposure.include=restart,health,logfile

# TODO: need to decide on security polices here...
management.security.enabled=false
#management.security.enabled=true
#management.security.roles=ACTUATOR

# SSL (TLS) configuration to secure the REST API.
# Must be enabled in Production environment!
# REST API not ready for production yet, so SSL is disabled.
#server.port=8443
#server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-password=secret
#server.ssl.key-password=another-secret

# Spring Boot profile for REST API.
# REST API not ready for production yet, so profile is dev.
spring.profiles.active=dev
#comment above profile and uncomment line below to operate using https
#spring.profiles.active=https

# Disable JMX for now - might use it for managing bot process later...
spring.jmx.enabled=false
